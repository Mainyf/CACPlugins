import java.util.regex.Pattern

plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id 'net.minecrell.plugin-yml.bukkit' version '0.5.1'
}

allprojects {

    repositories {
        mavenLocal()
        maven {
            url = uri("https://papermc.io/repo/repository/maven-public")
        }
        maven {
            url = uri("https://hub.spigotmc.org/nexus/content/repositories/public")
        }
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "net.minecrell.plugin-yml.bukkit"

    version '1.0'

    sourceSets.main.java.srcDirs += ['src/main/kotlin']

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
//            (this as JavaToolchainSpec).languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_17
        }
    }

    configurations {
        embed
        implementation.extendsFrom(embed)
    }

    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation("io.github.mainyf:newmclib-craftbukkit:1.7.2")
//        implementation("org.spigotmc:spigot-api:1.17.1-R0.1-SNAPSHOT")
        implementation("io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT")
        compileOnly(rootProject.fileTree("libs"))
        compileOnly(rootProject.files("./server/plugins/ProtocolLib.jar"))
        if (project.name == "item-skills-plus") {
            embed("com.udojava:EvalEx:2.7")
            compileOnly(rootProject.files("./server/plugins/ItemsAdder_3.0.4b.jar"))
            compileOnly(rootProject.files("PlaceholderAPI-2.11.1.jar"))
        }
        if (project.name == "my-islands") {
            compileOnly(rootProject.files("./server/plugins/ItemsAdder_3.0.4b.jar"))
            compileOnly(rootProject.files("./server/plugins/PlotSquared-Bukkit-6.6.2-Premium.jar"))
        }
    }

    jar {
        from(configurations.embed.collect {
            if (it.isDirectory()) it else zipTree(it)
        })
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    bukkit {
        def pluginName = lineToUpper(project.name)
        def packageName = lineToLower(project.name)
        name = pluginName
        main = "io.github.mainyf.${packageName}.${pluginName}"
        version = project.version
        apiVersion = '1.13'

        def dd = []
        if (project.name == "item-skills-plus") {
            dd.addAll("ProtocolLib", "ItemsAdder")
        } else if (project.name == "my-islands") {
            dd.addAll("PlotSquared", "ItemsAdder", "ProtocolLib")
        } else if (project.name == "world-settings") {
            dd.addAll("ProtocolLib")
        }
        dd.add("NewMCLib")
        depend = dd
    }

    tasks.register("copyPlugin", Copy) {
        group = "bukkit"
        rootProject.file("./server/plugins/").listFiles().find {
            it.name.startsWith(project.name) && it.name.endsWith(".jar")
        }?.delete()
        from(jar)
        into(rootProject.file("./server/plugins/").absolutePath)
    }

    tasks.register("runServer", JavaExec) {
        dependsOn(copyPlugin)
        classpath = rootProject.files("./server/paper-1.18.2-239.jar")
        main = "io.papermc.paperclip.Paperclip"
        jvmArgs = ["-Xmx4g", "-Dfile.encoding=UTF-8"/*, "-javaagent:${rootProject.file("./server/paper-1.18.2-239.jar").absolutePath}"*/]
        args = ["nogui"]
        workingDir = rootProject.file("./server")
        standardOutput = System.out
        standardInput = System.in
        errorOutput = System.err
        group = "bukkit"
        description = "runs the bukkit server"
    }

}


static def lineToUpper(String param) {
    def sb = new StringBuilder(param)
    def mc = Pattern.compile("-").matcher(param.toString())
    int i = 0
    sb.setCharAt(0, sb.charAt(0).toString().toUpperCase().toCharArray()[0])
    while (mc.find()) {
        int position = mc.end() - (i++);
        sb.replace(position - 1, position + 1, sb.substring(position, position + 1).toUpperCase())
    }
    return sb.toString()
}

static def lineToLower(String param) {
    def sb = new StringBuilder(param)
    def mc = Pattern.compile("-").matcher(param.toString())
    int i = 0
    while (mc.find()) {
        int position = mc.end() - (i++);
        sb.replace(position - 1, position + 1, sb.substring(position, position + 1).toLowerCase())
    }
    return sb.toString()
}